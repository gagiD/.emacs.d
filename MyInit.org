
#+STARTUP: overview
#+TITLE: gagiD Emacs
#+CREATOR: gagiD
#+LANGUAGE: en
#+OPTIONS: num:nil

* General
** Packages
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC
** Change some defaults
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p) ; simpler

  (delete-selection-mode t) ; delete selection
  (transient-mark-mode t)   ; delete selection on type?

  (global-auto-revert-mode 1) ; reload buffer
  (global-set-key (kbd "<f5>") 'revert-buffer)

  (setq ring-bell-function 'ignore) ; people say this is anoying

  (setq save-interprogram-paste-before-kill t)
#+END_SRC
** Config edit/reload
*** edit config
#+BEGIN_SRC emacs-lisp
  (defun visit-config ()
    (interactive)
    (find-file "~/.emacs.d/MyInit.org"))

  (global-set-key (kbd "C-c e") 'visit-config)
#+END_SRC
*** edit init
#+BEGIN_SRC emacs-lisp
  (defun visit-init ()
      (interactive)
      (find-file "~/.emacs.d/init.el"))

  (global-set-key (kbd "C-c i") 'visit-init)
#+END_SRC
*** reload config
#+BEGIN_SRC emacs-lisp
  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/MyInit.org")))

  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC
** UTF-8
#+BEGIN_SRC emacs-lisp
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (load-library "iso-transl")
#+END_SRC
** Author info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Eldin Gagulic gagiD"
        user-mail-address "eldin.gagulic@gmail.com"
        calendar-latitude 40.00
        calendar-longitude -105.16
        calendar-location-name "BiH")
#+END_SRC
** Help
  Brings up some help
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode)
    :bind ("C-h C-k" . which-key-show-top-level))

  (use-package discover-my-major
    :ensure t
    :commands (discover-my-major discover-my-mode)
    :bind ("C-h C-m" . discover-my-major))
#+END_SRC
** Editing
*** IEdit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC
*** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-c m" . er/expand-region))
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :ensure smartparens
    :config (show-smartparens-global-mode t))

  (add-hook 'prog-mode-hook #'smartparens-mode)
  (add-hook 'markdown-mode-hook #'smartparens-mode)
  (add-hook 'text-mode-hook #'smartparens-mode)
#+END_SRC
*** Kill whole word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))

  (global-set-key (kbd "C-c w k") 'kill-whole-word)
#+END_SRC
*** Copy word
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))

  (global-set-key (kbd "C-c w c") 'copy-whole-word)
#+END_SRC
*** Kill line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l k") 'kill-whole-line)
#+END_SRC
*** Copy whole line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))

  (global-set-key (kbd "C-c l c") 'copy-whole-line)
#+END_SRC
*** Sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s e" . sudo-edit))
#+END_SRC
*** Kill-ring max entries
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)
#+END_SRC
*** Killring popup
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
*** Zzz to char
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :bind ("M-z" . zzz-up-to-char))
#+END_SRC
*** Tabs
#+BEGIN_SRC emacs-lisp
  (set-default 'indent-tabs-mode nil)

  (setq-default tab-width 4)
  (setq tab-width 4)

  (electric-indent-mode 1)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  (setq create-lockfiles nil)
#+END_SRC
** Scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-error-top-bottom t)

  (setq scroll-conservatively 10000)
#+END_SRC
** Buffers
*** Kill other buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

  (global-set-key (kbd "C-x K") 'kill-other-buffers)
#+END_SRC
*** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    "Kill all buffers."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))

  (global-set-key (kbd "C-M-K") 'kill-other-buffers)
#+END_SRC
*** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8 
          helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (require 'helm-config)    
  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)
                            (projects . 10))))
#+END_SRC
** Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
* Look
** Interface
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (tool-bar-mode   -1)
  (menu-bar-mode   -1)
  (scroll-bar-mode -1)

  (setq sentence-end-double-space nil)

  (global-prettify-symbols-mode t)
#+END_SRC
** Line numbers, highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)

  (global-linum-mode t)
  (setq linum-format "%4d ")

  (setq column-number-mode t)

  (use-package beacon
    :ensure t
    :config (beacon-mode 1))
#+END_SRC
** Themes
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :ensure t
    :after flycheck
    :init
    (load-theme 'zerodark t)
    (zerodark-setup-modeline-format))
#+END_SRC
** Modeline
*** Powerline
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'smartparens-mode)
    (diminish 'rainbow-mode))
#+END_SRC
** Unicode
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Emoji :D
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :config (add-hook 'after-init-hook #'global-emojify-mode))
#+END_SRC
** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode)
          (add-hook 'text-mode-hook 'rainbow-mode)
          (add-hook 'conf-mode-hook 'rainbow-mode))

  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
          (add-hook 'text-mode-hook #'rainbow-delimiters-mode)
          (add-hook 'conf-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Org mode
** Org common
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Programming
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
      (use-package yasnippet-snippets
        :ensure t)
      (yas-reload-all))
#+END_SRC
** FlyCheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
** Projectile
*** Enable projectile globally
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-mode 1))
#+END_SRC
*** Compile on f5
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC
** C/C++
*** General
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4)
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC
*** FlyCheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))
#+END_SRC
** Python
*** Company
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))

  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+END_SRC
*** FlyCheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'flycheck-mode)
#+END_SRC
** ELisp
*** Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC
*** Eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC
** Lua
*** Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'lua-mode-hook 'company-mode)

  (defun custom-lua-repl-bindings ()
    (local-set-key (kbd "C-c C-s") 'lua-show-process-buffer)
    (local-set-key (kbd "C-c C-h") 'lua-hide-process-buffer))

  (defun lua-mode-company-init ()
    (setq-local company-backends '((company-lua
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-lua
    :ensure t
    :config
    (require 'company)
    (setq lua-indent-level 4)
    (setq lua-indent-string-contents t)
    (add-hook 'lua-mode-hook 'custom-lua-repl-bindings)
    (add-hook 'lua-mode-hook 'lua-mode-company-init))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'lua-mode-hook 'yas-minor-mode)
#+END_SRC
*** FlyCheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'lua-mode-hook 'flycheck-mode)
#+END_SRC
** Bash
*** Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
                                    company-shell-env
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-shell
    :ensure t
    :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
#+END_SRC
*** FlyCheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'flycheck-mode)
#+END_SRC
** Build systems
*** Meson
#+BEGIN_SRC emacs-lisp
  (use-package meson-mode
    :ensure t
    :init (add-hook 'meson-mode-hook 'company-mode))
#+END_SRC
* Git
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC
